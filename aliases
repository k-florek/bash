##### ------------------------------------------------------------------
##### Aliases and functions
##### ------------------------------------------------------------------

### --------------------------------------------------------------------
### Bash
### --------------------------------------------------------------------
alias c='clear'
alias ll='ls -alsh'
alias mkdir='mkdir -pv'
alias h='history'
alias now='date +"%T"'
alias nowtime=now
alias nowdate='date +"%d-%m-%Y"'
alias ports='netstat -tulanp'

# do not delete / or prompt if deleting more than 3 files at a time
alias rm='rm -I --preserve-root'

## pass options to free
alias meminfo='free -m -l -t'

## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

## get top process eating cpu
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

# Get server cpu info
alias cpuinfo='lscpu'

# older system use /proc/cpuinfo 
#alias cpuinfo='less /proc/cpuinfo'

# get GPU ram on desktop / laptop
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'



### --------------------------------------------------------------------
### Terraform
### --------------------------------------------------------------------
alias tf='terraform'



### --------------------------------------------------------------------
### Functions
### --------------------------------------------------------------------

# Docker run
function docker_run() {
docker run --rm=True -u $(id -u):$(id -g) -v $(pwd):/data "$@"
}


# show git branches both remote and local
git_show_branches() {
    remote_branches="$(git ls-remote --heads origin)"
    git branch -a
    echo -e "\033[38;5;202m+++ REMOTE BRANCHES +++\033[0m"
    echo -e "\033[38;5;208m$remote_branches\033[0m"
}


# count the number of updates in /var/cache/apt/archives and report
pkg_update_report()
{
    local deb_count
    deb_count=$(ls -1 /var/cache/apt/archives/*.deb 2>/dev/null | wc -l)

    if [ "$deb_count" -gt 0 ]; then
        echo -e "There are \e[92m$deb_count downloaded packages \e[0min the deb archive on this system.\e[0m"
    fi
}



# report on age of current password
# only works with local users
check_password_age() {

    # this won't work with some systems using AD auth since it requires sudo
    `test -n `grep $(whoami) /etc/passwd &>/dev/null`` || return

    # Constants
    age_warning_days=75
    age_critical_days=90


    local username="$1"
    local verbose="$2" # pass -v to always report

    # no username, assume the user running the function
    test -z "$username" && username=$LOGNAME

    # if -v passed as "$1", assume LOGNAME and verbose mode
    if [ "$username" = "-v" ];then
        username=$LOGNAME
        verbose="-v"
    fi

    # Get the password aging information using chage
    local password_info=$(chage -l "$username" 2>/dev/null)

    if [[ -n "$password_info" ]]; then

        # Extract the last password change date
        local last_change=$(echo "$password_info" | grep "Last password change" | awk -F ': ' '{print $2}')

        if [[ -n "$last_change" ]]; then
            # Calculate the age of passwd in days
            local current_date=$(date +%s)
            local last_change_date=$(date -d "$last_change" +%s)
            local age_seconds=$((current_date - last_change_date))
            local age_days=$((age_seconds / 86400))  # 86400 seconds in a day

            # Determine color based on age of pass
            local color_code=""
            if (( age_days > age_critical_days )); then
                color_code="\033[91m"  # Red color
            elif (( age_days > age_warning_days )); then
                color_code="\033[93m"  # Yellow color
            fi

            # Determine if output should be printed
            local output=false
            if [[ "$verbose" == "-v" || age_days -gt $age_warning_days ]]; then
                output=true
            fi

            # Print output if necessary
            if [[ "$output" == true ]]; then
                echo -e "${color_code}Current password age for user $username is approximately $age_days days.\033[0m"
            fi

        else
            echo "Error: Failed to retrieve last password change date."
        fi
    else
        echo "Error: User $username not found or unable to retrieve password aging information."
    fi
}